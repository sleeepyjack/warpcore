cmake_minimum_required(VERSION 3.18 FATAL_ERROR)

# Set policy for FetchContent timestamps
if(POLICY CMP0135)
    cmake_policy(SET CMP0135 NEW)
endif()

# Use environment variables for compilers if set, otherwise use defaults
# This must be done before the project() call
if(DEFINED ENV{CC} AND NOT "$ENV{CC}" STREQUAL "")
    set(CMAKE_C_COMPILER $ENV{CC})
endif()
if(DEFINED ENV{CXX} AND NOT "$ENV{CXX}" STREQUAL "")
    set(CMAKE_CXX_COMPILER $ENV{CXX})
endif()

project(warpcore VERSION 0.0.1 LANGUAGES CXX CUDA)

###################################################################################################
# - build type ------------------------------------------------------------------------------------

# Set a default build type if none was specified
set(DEFAULT_BUILD_TYPE "Release")

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${DEFAULT_BUILD_TYPE}' since none specified.")
  set(CMAKE_BUILD_TYPE "${DEFAULT_BUILD_TYPE}" CACHE STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

###################################################################################################
# Auto-detect available GPU compute architectures

set(GPU_ARCHS "" CACHE STRING "List of GPU architectures (semicolon-separated) to be compiled for. Empty string means to auto-detect the GPUs on the current system")

if("${GPU_ARCHS}" STREQUAL "")
  include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/EvalGpuArchs.cmake)
  evaluate_gpu_archs(GPU_ARCHS)
endif()

###################################################################################################
# - find packages we depend on --------------------------------------------------------------------

find_package(CUDAToolkit 11.2 REQUIRED)

# package manager
include(cmake/CPM.cmake)

# macro for configuring executables
include(cmake/ConfigureExecutable.cmake)

# timers, utils, etc.
# TODO switch to default branch once merged
CPMAddPackage(
  NAME helpers
  URL https://gitlab.rlp.net/pararch/hpc_helpers/-/archive/restructure/hpc_helpers-restructure.zip
  DOWNLOAD_EXTRACT_TIMESTAMP ON
)

# lightweight GPU RNG
CPMAddPackage(
  NAME kiss_rng
  URL https://github.com/sleeepyjack/kiss_rng/archive/refs/heads/master.zip
  DOWNLOAD_EXTRACT_TIMESTAMP ON
)

###################################################################################################
# - warpcore target   -----------------------------------------------------------------------------

add_library(warpcore INTERFACE)
target_include_directories(warpcore INTERFACE
                           "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>"
                           $<INSTALL_INTERFACE:include>)
target_link_libraries(warpcore INTERFACE helpers kiss_rng CUDA::cudart)

###################################################################################################
# - build options ---------------------------------------------------------------------------------

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_CUDA_STANDARD 17)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_EXTENSIONS OFF)

set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --expt-extended-lambda --expt-relaxed-constexpr")

set(WARPCORE_TESTS_BINARY_DIR "${CMAKE_BINARY_DIR}/tests")
set(WARPCORE_BENCHMARKS_BINARY_DIR "${CMAKE_BINARY_DIR}/benchmarks")
set(WARPCORE_EXAMPLES_BINARY_DIR "${CMAKE_BINARY_DIR}/examples")

option(WARPCORE_BUILD_TESTS "Configure CMake to build tests" OFF)
option(WARPCORE_BUILD_BENCHMARKS "Configure CMake to build benchmarks" OFF)
option(WARPCORE_BUILD_EXAMPLES "Configure CMake to build examples" OFF)

if(WARPCORE_BUILD_TESTS)
    add_subdirectory(tests)
endif(WARPCORE_BUILD_TESTS)

if(WARPCORE_BUILD_BENCHMARKS)
    add_subdirectory(benchmarks)
endif(WARPCORE_BUILD_BENCHMARKS)

if(WARPCORE_BUILD_EXAMPLES)
    add_subdirectory(examples)
endif(WARPCORE_BUILD_EXAMPLES)
